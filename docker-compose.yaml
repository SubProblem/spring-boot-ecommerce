version: "3.8"

services:

  config-service:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-service
    ports:
      - "8888:8888"
    networks:
      - backend
  #    restart: always


  discovery-service:
    build:
      context: ./discovery
      dockerfile: Dockerfile
    container_name: discovery-service
    depends_on:
      - config-service
    ports:
      - "8761:8761"
    networks:
      - backend
    restart: on-failure

  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8060:8060"
    depends_on:
      - discovery-service
    networks:
      - backend
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8060/health" ]
      interval: 10s
      timeout: 5s
      retries: 3


  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8092:8092"
    restart: always
    networks:
      - backend
      - postgres-orders
    depends_on:
      - discovery-service
      - config-service
      - order-db
      - broker
      - zookeeper
    environment:
      - SPRING_DATASOURCE_USERNAME=service1
      - SPRING_DATASOURCE_PASSWORD=admin1
      - SPRING_DATASOURCE_URL=jdbc:postgresql://order-db:5432/order
      - SPRING_KAFKA_BOOTSTRAPSERVERS=broker:29092


  security-service:
    build:
      context: ./security-service
      dockerfile: Dockerfile
    container_name: security-service
    ports:
      - "8091:8091"
    networks:
      - backend
      - postgres-users
    depends_on:
      - discovery-service
      - config-service
      - user-db
    environment:
      - SPRING_DATASOURCE_USERNAME=service1
      - SPRING_DATASOURCE_PASSWORD=admin1
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/user

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8090:8090"
    networks:
      - backend
      - postgres-products
    depends_on:
      - discovery-service
      - config-service
      - product-db
      - broker
      - zookeeper
    environment:
      - SPRING_DATASOURCE_USERNAME=service1
      - SPRING_DATASOURCE_PASSWORD=admin1
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product-db:5432/product
      - SPRING_KAFKA_BOOTSTRAPSERVERS=broker:29092

    restart: always


  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8095:8095"
    networks:
      - backend
    depends_on:
      - discovery-service
      - config-service
      - product-db
      - broker
      - zookeeper
    environment:
      - SPRING_KAFKA_BOOTSTRAPSERVERS=broker:29092

    restart: always


  order-db:
    image: postgres
    container_name: order-db
    restart: always
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=order
      - POSTGRES_USER=service1
      - POSTGRES_PASSWORD=admin1
    healthcheck:
      test: ["CMD", "pg_isready -U service1"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - postgres-orders
    volumes:
      - pgdata:/var/lib/postgresql/data

  user-db:
    image: postgres
    container_name: user-db
    restart: always
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=user
      - POSTGRES_USER=service1
      - POSTGRES_PASSWORD=admin1
    healthcheck:
      test: ["CMD", "pg_isready -U service1"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - postgres-users
    volumes:
      - pgdata2:/var/lib/postgresql/data

  product-db:
    image: postgres
    container_name: product-db
    restart: always
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_DB=product
      - POSTGRES_USER=service1
      - POSTGRES_PASSWORD=admin1
    healthcheck:
      test: ["CMD", "pg_isready -U service1"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - postgres-products
    volumes:
      - pgdata3:/var/lib/postgresql/data


#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8075:8080

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend



  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend




volumes:
  pgdata:
  pgdata2:
  pgdata3:

networks:
  backend:
  postgres-orders:
  postgres-users:
  postgres-products: